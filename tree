struct Node* minNodeAdd(struct Node* root){// give add of min node
    
    
    if(root == NULL){
        printf("no elelment is present");
        return NULL;
    }
    if(root->leftLink == NULL){
        return root;
    }
    else{
        return minNodeAdd(root->leftLink);
        
    }
}
struct Node* del(struct Node* root, int val){
    if(root == NULL){
        printf("tree is already empty");
        return NULL;
    }
    else if( root->val > val){
        root->leftLink = del(root->leftLink, val);
        
    }
    else if(root->val < val){
        root->rightLink = del(root->rightLink, val);
    }
    else{
        // in case of leaf Node
        if(root->leftLink == NULL && root->rightLink == NULL){
            struct Node* tempnode = root;
            root = NULL;
            free(tempnode);
            return root;
            
            
        }
        // in case of one child
        // if only left node is present
        else if(root->rightLink == NULL){
            struct Node* tempnode = root;
            root = root->leftLink;
            free(tempnode);
            
            
        }
        // if only right child is presenrt 
        else if(root->leftLink == NULL){
             struct Node* tempnode = root;
            root = root->rightLink;
            free(tempnode);
            
            
        }
        
        // in case of two child is present
        // min min val in the right subtree
        else{
            struct Node* minValNode = minNodeAdd(root->rightLink);
            root->val = minValNode->val;
            root->rightLink = del(root->rightLink,minValNode->val );
            
        }
    }
    
    return root;
}


int main()
{
    struct Node* root = NULL; //basically it is a pointer which contains the address of a node 
    // make sure we should not disturb the address of the pointer
    
     root = insert(51, root);
     
      root = insert(57, root);
        root = insert(52, root);
        root =  insert(53, root);
      root = insert(2, root);
      root =  insert(89, root);
        root = insert(11, root);
        root =  insert(12, root);
      root = insert(34, root);
       root = insert(4, root);
        root = insert(23, root);
        
       
       int minn = min(root);
       printf("min -> %d\n", minn);
       
       int hei = height(root);
       printf("height %d\n", hei);
   
       bfs(root);
       printf("\n");
       inorder(root);
         printf("\n");
       preorder(root);
         printf("\n");
       postorder(root);
       
       int p = isBST(root);
       printf("\np -> %d\n",p);
       
       struct Node* rootu = del(root, 89);
       rootu = del(root, 34);
        inorder(root);
         printf("\n");

    return 0;
}
