int  search(int val, struct Node* root){
    
    
    if(root == NULL){
       
        return -1;
        
    }
    else if(root->val == val){
       
        return 0;
    }
    else if(val > root->val){
       return search( val, root->rightLink);
        
    }
    else{
       return search(val, root->leftLink);
    }
    
   
}
int i = 0;
int min(struct Node* root){
    
    
    if(root == NULL){
        printf("no elelment is present");
        return -1;
    }
    if(root->leftLink == NULL){
        return root->val;
    }
    else{
        return min(root->leftLink);
        
    }
}

int max(struct Node* root){
    
    
    if(root == NULL){
        printf("no elelment is present");
        return -1;
    }
    if(root->rightLink == NULL){
        return root->val;
    }
    else{
        return min(root->rightLink);
        
    }
}
int height(struct Node* root){
    if(root == NULL){
        return -1;
    }
     int leftHeight = height(root->leftLink);
     int rightHeight = height(root->rightLink);
     int h = ((leftHeight > rightHeight) ? leftHeight:rightHeight)+1;
     return h ;
}
struct Node* arr[max_size];
int front = -1;
int rear = -1;


void enqueue(struct Node* address){ // address of a node that we want to put in queue
    
    if(front == -1){
        front++;
        rear++;
        arr[rear] = address;
        return;
    }
    else if(front == (rear+1)%max_size){
        printf("queue is filled");
        return;
        
    }
    else{
        rear = (rear+1)%max_size;
        arr[rear]= address;
    }
    
}

void deque(){
    if(front == -1){
        printf("arr is already empty");
        return ;
    }
    else if(front == rear){
        
        front = -1;
        rear = -1;
        return ;
    }
    else{
       
        
        front = (front+1)%max_size;
        
        return;
        
        
        
    }
    
    
}

void inorder(struct Node* root){
    if(root == NULL){
        return;
    }
    
   
    inorder(root->leftLink);
     printf("%d ->", root->val);
    inorder(root->rightLink);
}
void preorder(struct Node* root){
    if(root == NULL){
        return;
    }
    
    printf("%d->", root->val);
    preorder(root->leftLink);
    preorder(root->rightLink);
}
void postorder(struct Node* root){
    if(root == NULL){
        return;
    }
    
   
    postorder(root->leftLink);
    postorder(root->rightLink);
     printf("%d->", root->val);
}


void bfs(struct Node* root){
    
    if(root == NULL){
        return;
    }
    enqueue(root);
    while( front != -1){
        struct Node* current = arr[front];
        printf("value - > %d", current->val);
        
        if(current->leftLink != NULL){
            enqueue(current->leftLink);
        }
        if(current->rightLink != NULL){
            enqueue(current->rightLink);
        }
        deque();
        
        
        
    }
   
   
   
}

int isBSU(struct Node* root, int min, int max){
    
    if(root == NULL){
        return true;
    }
    
    else if(root->val < min ||root->val > max ){
        return false;
    }
    else{
        return( (isBSU(root->leftLink, min, root->val-1)) && (isBSU(root->rightLink, root->val +1, max)));
    }
}


int isBST(struct Node* root){
    int min = -1234;
    int max = 1234;
    return isBSU(root, min,max);
}

struct Node* minNodeAdd(struct Node* root){// give add of min node
    
    
    if(root == NULL){
        printf("no elelment is present");
        return NULL;
    }
    if(root->leftLink == NULL){
        return root;
    }
    else{
        return minNodeAdd(root->leftLink);
        
    }
}
struct Node* del(struct Node* root, int val){
    if(root == NULL){
        printf("tree is already empty");
        return NULL;
    }
    else if( root->val > val){
        root->leftLink = del(root->leftLink, val);
        
    }
    else if(root->val < val){
        root->rightLink = del(root->rightLink, val);
    }
    else{
        // in case of leaf Node
        if(root->leftLink == NULL && root->rightLink == NULL){
            struct Node* tempnode = root;
            root = NULL;
            free(tempnode);
            return root;
            
            
        }
        // in case of one child
        // if only left node is present
        else if(root->rightLink == NULL){
            struct Node* tempnode = root;
            root = root->leftLink;
            free(tempnode);
            
            
        }
        // if only right child is presenrt 
        else if(root->leftLink == NULL){
             struct Node* tempnode = root;
            root = root->rightLink;
            free(tempnode);
            
            
        }
        
        // in case of two child is present
        // min min val in the right subtree
        else{
            struct Node* minValNode = minNodeAdd(root->rightLink);
            root->val = minValNode->val;
            root->rightLink = del(root->rightLink,minValNode->val );
            
        }
    }
    
    return root;
}


int main()
{
    struct Node* root = NULL; //basically it is a pointer which contains the address of a node 
    // make sure we should not disturb the address of the pointer
    
     root = insert(51, root);
     
      root = insert(57, root);
        root = insert(52, root);
        root =  insert(53, root);
      root = insert(2, root);
      root =  insert(89, root);
        root = insert(11, root);
        root =  insert(12, root);
      root = insert(34, root);
       root = insert(4, root);
        root = insert(23, root);
        
       
       int minn = min(root);
       printf("min -> %d\n", minn);
       
       int hei = height(root);
       printf("height %d\n", hei);
   
       bfs(root);
       printf("\n");
       inorder(root);
         printf("\n");
       preorder(root);
         printf("\n");
       postorder(root);
       
       int p = isBST(root);
       printf("\np -> %d\n",p);
       
       struct Node* rootu = del(root, 89);
       rootu = del(root, 34);
        inorder(root);
         printf("\n");

    return 0;
}
